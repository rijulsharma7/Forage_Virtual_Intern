From 6f02f88ddeeba9c535720395c152e95f80ca6df2 Mon Sep 17 00:00:00 2001
From: Chirag Sidana <chiragsidana2709@gmail.com>
Date: Sat, 22 Jan 2022 02:40:23 +0530
Subject: [PATCH] Create Patch File

---
 package.json  |  1 +
 src/App.tsx   | 16 +++++++++++++++-
 src/Graph.tsx | 17 +++++++++++++++--
 3 files changed, 31 insertions(+), 3 deletions(-)

diff --git a/package.json b/package.json
index a8ddff6..65908e7 100644
--- a/package.json
+++ b/package.json
@@ -36,4 +36,5 @@
     "source-map-loader": "^0.2.4",
     "typescript": "^3.2.4"
   }
+  
 }
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..527f87a 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph:false,
     };
   }
 
@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if(this.state.showGraph){
     return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x=0;
+    const interval=setInterval(()=>{
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({ 
+        data: serverResponds,
+        showGraph:true,
+       });
     });
+    x++;
+    if(x>1000){
+      clearInterval(interval);
+    }
+  },100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..d89e866 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem =document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,19 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('coloumn-pivots','["stocj"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('coloumns','["top_ask_price"]');
+      elem.setAttribute('aggregates',
+      {"stock":"distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price":"avg",
+      "timestamp":"distinct count"  });
+
+    
+      
+
     }
   }
 
-- 
2.34.1.windows.1

